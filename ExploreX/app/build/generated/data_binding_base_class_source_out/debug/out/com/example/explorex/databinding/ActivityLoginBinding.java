// Generated by view binder compiler. Do not edit!
package com.example.explorex.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.explorex.R;
import com.google.android.material.button.MaterialButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityLoginBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final EditText email;

  @NonNull
  public final MaterialButton loginButton;

  @NonNull
  public final EditText password;

  @NonNull
  public final TextView registerNow;

  @NonNull
  public final TextView zalogujSie;

  private ActivityLoginBinding(@NonNull RelativeLayout rootView, @NonNull EditText email,
      @NonNull MaterialButton loginButton, @NonNull EditText password,
      @NonNull TextView registerNow, @NonNull TextView zalogujSie) {
    this.rootView = rootView;
    this.email = email;
    this.loginButton = loginButton;
    this.password = password;
    this.registerNow = registerNow;
    this.zalogujSie = zalogujSie;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityLoginBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityLoginBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_login, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityLoginBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.email;
      EditText email = ViewBindings.findChildViewById(rootView, id);
      if (email == null) {
        break missingId;
      }

      id = R.id.login_button;
      MaterialButton loginButton = ViewBindings.findChildViewById(rootView, id);
      if (loginButton == null) {
        break missingId;
      }

      id = R.id.password;
      EditText password = ViewBindings.findChildViewById(rootView, id);
      if (password == null) {
        break missingId;
      }

      id = R.id.register_now;
      TextView registerNow = ViewBindings.findChildViewById(rootView, id);
      if (registerNow == null) {
        break missingId;
      }

      id = R.id.zaloguj_sie;
      TextView zalogujSie = ViewBindings.findChildViewById(rootView, id);
      if (zalogujSie == null) {
        break missingId;
      }

      return new ActivityLoginBinding((RelativeLayout) rootView, email, loginButton, password,
          registerNow, zalogujSie);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
